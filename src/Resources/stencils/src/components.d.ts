/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Moment,
} from './typings/moment';


export namespace Components {

  interface RunopencodeChoiceType {
    'display': number | null;
    'getValue': () => Promise<string | string[]>;
    'placeholder': string | null;
    'searchPlaceholder': string | null;
    'setValue': (value: string | string[]) => Promise<void>;
  }
  interface RunopencodeChoiceTypeAttributes extends StencilHTMLAttributes {
    'display'?: number | null;
    'onChange'?: (event: CustomEvent) => void;
    'placeholder'?: string | null;
    'searchPlaceholder'?: string | null;
  }

  interface RunopencodeDateRangeType {
    'dateFormat': string;
    'disableWeekends': boolean;
    'disabled': boolean;
    'getDateFrom': () => Promise<Date>;
    'getDateTo': () => Promise<Date>;
    'getValue': () => Promise<[Date, Date]>;
    'maxDate': Moment | String | Number | Date;
    'maxDays': number | null;
    'minDate': Moment | String | Number | Date;
    'minDays': number | null;
    'numberOfMonths': number;
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'setDateFrom': (from: Date) => Promise<void>;
    'setDateTo': (to: Date) => Promise<void>;
    'setValue': (from: Date, to: Date) => Promise<void>;
    'theme': string;
  }
  interface RunopencodeDateRangeTypeAttributes extends StencilHTMLAttributes {
    'dateFormat'?: string;
    'disableWeekends'?: boolean;
    'disabled'?: boolean;
    'maxDate'?: Moment | String | Number | Date;
    'maxDays'?: number | null;
    'minDate'?: Moment | String | Number | Date;
    'minDays'?: number | null;
    'numberOfMonths'?: number;
    'onChange'?: (event: CustomEvent) => void;
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'theme'?: string;
  }

  interface RunopencodeDateType {
    'dateFormat': string;
    'disableWeekends': boolean;
    'disabled': boolean;
    'getValue': () => Promise<Date>;
    'maxDate': Moment | String | Number | Date;
    'minDate': Moment | String | Number | Date;
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'setValue': (date: Date) => Promise<void>;
    'theme': string;
  }
  interface RunopencodeDateTypeAttributes extends StencilHTMLAttributes {
    'dateFormat'?: string;
    'disableWeekends'?: boolean;
    'disabled'?: boolean;
    'maxDate'?: Moment | String | Number | Date;
    'minDate'?: Moment | String | Number | Date;
    'onChange'?: (event: CustomEvent) => void;
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'theme'?: string;
  }

  interface RunopencodeSwitchType {
    'check': () => Promise<void>;
    'disabled': boolean;
    'getValue': () => Promise<boolean>;
    'labelChecked': string | null;
    'labelUnchecked': string | null;
    'readonly': boolean;
    'setValue': (value: boolean) => Promise<void>;
    'toggle': () => Promise<void>;
    'uncheck': () => Promise<void>;
  }
  interface RunopencodeSwitchTypeAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'labelChecked'?: string | null;
    'labelUnchecked'?: string | null;
    'onChange'?: (event: CustomEvent) => void;
    'readonly'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'RunopencodeChoiceType': Components.RunopencodeChoiceType;
    'RunopencodeDateRangeType': Components.RunopencodeDateRangeType;
    'RunopencodeDateType': Components.RunopencodeDateType;
    'RunopencodeSwitchType': Components.RunopencodeSwitchType;
  }

  interface StencilIntrinsicElements {
    'runopencode-choice-type': Components.RunopencodeChoiceTypeAttributes;
    'runopencode-date-range-type': Components.RunopencodeDateRangeTypeAttributes;
    'runopencode-date-type': Components.RunopencodeDateTypeAttributes;
    'runopencode-switch-type': Components.RunopencodeSwitchTypeAttributes;
  }


  interface HTMLRunopencodeChoiceTypeElement extends Components.RunopencodeChoiceType, HTMLStencilElement {}
  var HTMLRunopencodeChoiceTypeElement: {
    prototype: HTMLRunopencodeChoiceTypeElement;
    new (): HTMLRunopencodeChoiceTypeElement;
  };

  interface HTMLRunopencodeDateRangeTypeElement extends Components.RunopencodeDateRangeType, HTMLStencilElement {}
  var HTMLRunopencodeDateRangeTypeElement: {
    prototype: HTMLRunopencodeDateRangeTypeElement;
    new (): HTMLRunopencodeDateRangeTypeElement;
  };

  interface HTMLRunopencodeDateTypeElement extends Components.RunopencodeDateType, HTMLStencilElement {}
  var HTMLRunopencodeDateTypeElement: {
    prototype: HTMLRunopencodeDateTypeElement;
    new (): HTMLRunopencodeDateTypeElement;
  };

  interface HTMLRunopencodeSwitchTypeElement extends Components.RunopencodeSwitchType, HTMLStencilElement {}
  var HTMLRunopencodeSwitchTypeElement: {
    prototype: HTMLRunopencodeSwitchTypeElement;
    new (): HTMLRunopencodeSwitchTypeElement;
  };

  interface HTMLElementTagNameMap {
    'runopencode-choice-type': HTMLRunopencodeChoiceTypeElement
    'runopencode-date-range-type': HTMLRunopencodeDateRangeTypeElement
    'runopencode-date-type': HTMLRunopencodeDateTypeElement
    'runopencode-switch-type': HTMLRunopencodeSwitchTypeElement
  }

  interface ElementTagNameMap {
    'runopencode-choice-type': HTMLRunopencodeChoiceTypeElement;
    'runopencode-date-range-type': HTMLRunopencodeDateRangeTypeElement;
    'runopencode-date-type': HTMLRunopencodeDateTypeElement;
    'runopencode-switch-type': HTMLRunopencodeSwitchTypeElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
